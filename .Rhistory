names()
years
for (year in years) {
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
}
lasu_kustannukset[, "2006"] <- 100
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
kustannukset_W
years2007_2017 <- lasu_kustannukset %>%
select(4:14) %>%
names()
years2007_2017
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
for (year in years2007_2017) {
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
}
lasu_kustannukset[, "2006"] <- 100
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
kustannukset_W
lasu_kustannukset <- read_csv2("lasu_kustannuksia.csv")
# nollakustannukset <- lasu_kustannukset %>%
filter(`2006` < 1000 |
`2007` == 0 |
`2008` == 0 |
`2009` == 0 |
`2010` == 0 |
`2011` == 0 |
`2012` == 0 |
`2013` == 0 |
`2014` == 0 |
`2015` == 0 |
`2016` == 0 |
`2017` == 0) %>%
distinct(kunta) %>% .$kunta
lasu_kustannukset <- read_csv2("lasu_kustannuksia.csv")
years2007_2017 <- lasu_kustannukset %>%
select(4:14) %>%
names()
for (year in years2007_2017) {
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
}
lasu_kustannukset[, "2006"] <- 100
kustannukset <- kustannukset_W %>%
gather(`2006`, `2007`, `2008`, `2009`,
`2010`, `2011`, `2012`, `2013`,
`2014`, `2015`, `2016`, `2017`,
key = "vuosi", value = "indeksi") %>%
select(kunta, kustannus, vuosi, indeksi) %>%
arrange(kunta, kustannus, vuosi) %>%
mutate(vuosi = as.double(vuosi))
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
for (year in years2007_2017) {
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
}
lasu_kustannukset[, "2006"] <- 100
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
nollakustannukset1 <- lasu_kustannukset %>%
filter(`2006` < 1000) %>%
distinct(kunta) %>% .$kunta
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
kustannukset <- kustannukset_W %>%
gather(`2006`, `2007`, `2008`, `2009`,
`2010`, `2011`, `2012`, `2013`,
`2014`, `2015`, `2016`, `2017`,
key = "vuosi", value = "indeksi") %>%
select(kunta, kustannus, vuosi, indeksi) %>%
arrange(kunta, kustannus, vuosi) %>%
mutate(vuosi = as.double(vuosi))
kustannukset
lasu_kustannukset <- read_csv2("lasu_kustannuksia.csv")
nollakustannukset1 <- lasu_kustannukset %>%
filter(`2006` < 1000) %>%
distinct(kunta) %>% .$kunta
nollakustannukset1
years2007_2017 <- lasu_kustannukset %>%
select(4:14) %>%
names()
for (year in years2007_2017) {
lasu_kustannukset[, year] <-
lasu_kustannukset[, year] / lasu_kustannukset[, "2006"] * 100
}
lasu_kustannukset[, "2006"] <- 100
lasu_kustannukset
kustannukset_W <- lasu_kustannukset %>%
filter(!(kunta %in% nollakustannukset1))
kustannukset_W
kustannukset <- kustannukset_W %>%
gather(`2006`, `2007`, `2008`, `2009`,
`2010`, `2011`, `2012`, `2013`,
`2014`, `2015`, `2016`, `2017`,
key = "vuosi", value = "indeksi") %>%
select(kunta, kustannus, vuosi, indeksi) %>%
arrange(kunta, kustannus, vuosi) %>%
mutate(vuosi = as.double(vuosi))
kustannukset
unique(kustannukset$kunta)
dplyr::near
mean
sd
ggplot
aes
is.finite
is.finite(0)
is.infinite(0)
!is.infinite(0)
!is.infiniteInf
!is.infinite(Inf)
is.finite(Inf)
as.integer()
as.integer
?seq_along
?vector
?seq_along
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
seq_along(df))
seq_along(df)
df[[1]]
ncol(df)
a:ncol(df)
1:ncol(df)
mtcars
means <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
means[[]] <- mean(mtcars[[i]])
}
for (i in seq_along(mtcars)) {
means[[i]] <- mean(mtcars[[i]])
}
means
flights
nycflights::flights
nycflights13::flights
library(tidyverse)
nycflights13::flights
flights
install.packages(c("nycflights13")
library(nycfligths13)
nycflights13
nycflights13::flights
library(nycfligths13)
install.packages(c("nycflights13")
install.packages("nycflights13")
install.packages("nycflights13")
library(nycfligths13)
library(nycflights13)
nycflights13::flights
flights[[1]]
typeof(flights)
typeof(flights[[1]])
nycflights13::flights
var_types <- vector("character", ncol(flights))
var_types
for (i in seq_along(fligths)) {
var_types[[i]] <- typeof(flights)[[i]]
}
for (i in seq_along(nycflights13::flights)) {
var_types[[i]] <- typeof(nycflights13::flights)[[i]]
}
typeof(nycflights13::flights)[[1]]
typeof(flights)[[1]]
typeof(flights)[[2]]
typeof(flights)[, 2}
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
nycflights13::flights
flights[[1]]
typeof(flights[[1]])
install.packages("nycflights13")
install.packages("nycflights13")
typeof(flights)[, 2}
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
nycflights13::flights
flights[[1]]
typeof(flights[[1]])
typeof(flights)[, 2]
flights
class(flights)
class(flights)[, 2]
class(flights[[, 2]])
flights[[, 2]]
typeof(flights[[2]])
for (i in seq_along(nycflights13::flights)) {
var_types[[i]] <- typeof(flights[[i]])
}
var_types
iris
uniques <- vector("integer", ncol(iris))
uniques
for (i in seq_along(iris)) {
uniques[[i]] <- length(unique(iris[[i]]))
}
uniques
distinct(iris[[1]])
distinct(iris, names(iris)[1])
iris %>% distinct(names(iris)[1])
iris %>% distinct(names(iris)[[1]])
names(iris)[[1]]
iris %>% distinct(iris[[1]])
letters
str_c(letters)
out <- ""
for (x in letters) {
out <- stringr::str_c(out, x)
}
out
letters
let <- letters
let
str_c(let)
str_c(let, sep = "")
str_c("a", "b")
str_c("a" "b")
c("a", "b")
str_c(c("a", "b"))
paste(letters, sep = "")
paste(letters, sep = "", collapse = NULL)
paste(letters, sep = ";")
x <- sample(100)
sd <- 0
for (i in seq_along(x)) {
sd <- sd + (x[i] - mean(x)) ^ 2
}
sd <- sqrt(sd / (length(x) - 1))
sd
sd(x)
runif(100)
x <- runif(100)
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
out
cumsum(x)
setwd("~/GitHub/IODS-project/data")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = "..")
hd
# reading data
hd <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F))
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
# dimensions and structure of the data
hd # the data has 395 rows and 33 variables
gii # the data has 649 rows and 33 variables
str(hd)
str(hd)
str(gii)
# dimensions and structure of the data
hd # the data has 195 rows and 8 variables
names(hd)
# renaming variabels
hd %>%
rename(rank = HDI.Rank)
names(hd)
# renaming variabels
hd %>%
rename(rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni__minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
# renaming variabels
hd %>%
rename(rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni-minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
# renaming variabels
hd %>%
rename(rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni_minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
# renaming variabels
hd <- hd %>%
rename(rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni_minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
names(gii)
gii %>%
rename(rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
mot_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
percent_in_parliament = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
labor_rate_w = Labour.Force.Participation.Rate..Female.,
labor_rate_m  = Labour.Force.Participation.Rate..Male.)
gii %>%
rename(rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
mot_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
percent_w_parliament = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
labor_rate_w = Labour.Force.Participation.Rate..Female.,
labor_rate_m  = Labour.Force.Participation.Rate..Male.)
gii <- gii %>%
rename(rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
mot_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
percent_w_parliament = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
labor_rate_w = Labour.Force.Participation.Rate..Female.,
labor_rate_m  = Labour.Force.Participation.Rate..Male.)
hd <- hd %>%
rename(hdi_rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni_minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
# reading data
hd <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv",
stringsAsFactors = F))
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
hd <- hd %>%
rename(hdi_rank = HDI.Rank,
country = Country,
hdi = Human.Development.Index..HDI.,
life_expectancy = Life.Expectancy.at.Birth,
exp_education = Expected.Years.of.Education,
mean_education = Mean.Years.of.Education,
gni = Gross.National.Income..GNI..per.Capita,
gni_minus_hdi = GNI.per.Capita.Rank.Minus.HDI.Rank)
gii <- gii %>%
rename(gii_rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
mot_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
repr_w = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
in_labor_w = Labour.Force.Participation.Rate..Female.,
in_labor_m  = Labour.Force.Participation.Rate..Male.)
hd
gii
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
gii <- gii %>%
rename(gii_rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
maternal_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
repr_w = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
in_labor_w = Labour.Force.Participation.Rate..Female.,
in_labor_m  = Labour.Force.Participation.Rate..Male.)
# mutating
# sex ratio with secondary education and
# labor force participation
gii %>%
mutate(edu_ratio = )
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
gii <- gii %>%
rename(gii_rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
maternal_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
repr_w = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
in_labor_w = Labour.Force.Participation.Rate..Female.,
in_labor_m  = Labour.Force.Participation.Rate..Male.)
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
gii <- gii %>%
rename(gii_rank = GII.Rank,
country = Country,
gii = Gender.Inequality.Index..GII.,
maternal_mortality = Maternal.Mortality.Ratio,
teen_births = Adolescent.Birth.Rate,
repr_w = Percent.Representation.in.Parliament,
sec_edu_w = Population.with.Secondary.Education..Female.,
sec_edu_m  = Population.with.Secondary.Education..Male.,
labor_w = Labour.Force.Participation.Rate..Female.,
labor_m  = Labour.Force.Participation.Rate..Male.)
# mutating
# sex ratio with secondary education and
# labor force participation
gii %>%
mutate(edu_sex_ratio = sec_edu_w / sec_edu_m,
labor_sex_ratio = labor_w / labor_m)
# joihing the two data
hd %>%
inner_join(gii, by = "country")
# mutating
# sex ratio with secondary education and
# labor force participation
gii <- gii %>%
mutate(edu_sex_ratio = sec_edu_w / sec_edu_m,
labor_sex_ratio = labor_w / labor_m)
gii
# joihing the two data
hd %>%
inner_join(gii, by = "country")
# joihing the two data
human <- hd %>%
inner_join(gii, by = "country")
# saving the data
write.csv2(human, "human.R")
# saving the data
write.csv2(human, "human.csv")
# saving the data
write.csv2(human, "human.rds")
human
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
sum(human$hdi_rank == human$gii_rank)
sum(human$hdi_rank == human$gii_rank, na.rm = T)
gii <- as_tibble(read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv",
stringsAsFactors = F, na.strings = ".."))
gii
setwd("~/GitHub/IODS-project")
setwd("~/GitHub/IODS-project")
library(tidyverse, GGally)
library(tidyverse, GGally, MASS)
Boston
boston
MASS
MASS::Boston
boston <- MASS::Boston
boston
boston <- as_tibble(MASS::Boston)
boston
print(boston)
print(boston, n = 3)
str(boston)
library(tidyverse, GGally, MASS)
setwd("~/GitHub/IODS-project")
install.packages("MASS")
install.packages("MASS")
pairs(boston)
?pairs
GGally::ggpairs(boston, mapping = aes(alpha = 0.3),
lower = list(combo = GGally::wrap("facethist", bins = 20)),
title = "Fig 1. Descriptive statistics and relationships between variables.")
GGally::ggpairs(boston, mapping = aes(alpha = 0.3),
lower = list(combo = GGally::wrap("facethist", bins = 20)),
title = "Fig 1. Descriptive statistics and relationships between variables.")
GGally::ggpairs(boston, mapping = aes(alpha = 0.3),
lower = list(combo = GGally::wrap("facethist", bins = 20)),
title = "Fig 1. Descriptive statistics and relationships between variables.")
gather(boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")
pairs(boston)
??corrplot
?corrplot
install.packages("corrplot")
is.numerica(boston)
is.numerical(boston)
is.numeric(boston)
vars(boston)
?corrplot
?coorrplot::corrplot
library(corrplot)
?corrplot
?pairs
?corrplot
boston_scaled <- scale(boston)
class(boston_scaled)
